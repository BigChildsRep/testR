@{

    # Version number of the schema used for this document
    SchemaVersion = '2.0.0.0'
    
    # ID used to uniquely identify this document
    GUID = 'b16871ae-90bd-4c42-b341-1e6bc7949ea5'
    
    # Author of this document
    Author = 'Administrator'
    
    # Description of the functionality provided by these settings
    # Description = ''
    
    # Company associated with this document
    CompanyName = 'Unknown'
    
    # Copyright statement for this document
    Copyright = '(c) 2017 Administrator. All rights reserved.'
    
    # Session type defaults to apply for this session configuration. Can be 'RestrictedRemoteServer' (recommended), 'Empty', or 'Default'
    SessionType = 'RestrictedRemoteServer'
    
    # Directory to place session transcripts for this session configuration
    # TranscriptDirectory = 'C:\Transcripts\'
    TranscriptDirectory = 'C:\Transcripts'
    
    # Whether to run this session configuration as the machine's (virtual) administrator account
    # RunAsVirtualAccount = $true
    RunAsVirtualAccount = $true
    
    # Groups associated with machine's (virtual) administrator account
    # RunAsVirtualAccountGroups = 'Remote Desktop Users', 'Remote Management Users'
    
    # Creates a 'User' PSDrive in the session for use with Copy-Item when File System provider is not visible.
    # MountUserDrive = $true
    
    # Optional maximum size in bytes of user drive created with MountUserDrive parameter. Default maximum size for User drive is 50MB.
    # UserDriveMaximumSize = 50000000
    
    # Group managed service account name under which the configuration will run
    # GroupManagedServiceAccount = 'CONTOSO\GroupManagedServiceAccount'
    
    # Scripts to run when applied to a session
    # ScriptsToProcess = 'C:\ConfigData\InitScript1.ps1', 'C:\ConfigData\InitScript2.ps1'
    
    # User roles (security groups), and the role capabilities that should be applied to them when applied to a session
    # RoleDefinitions = @{ 'CONTOSO\SqlAdmins' = @{ RoleCapabilities = 'SqlAdministration' }; 'CONTOSO\ServerMonitors' = @{ VisibleCmdlets = 'Get-Process' } } 
    RoleDefinitions = @{ 'gfn-training\FISIAdmins' = @{ RoleCapabilities = 'FISIJEARole' }}
    
    # Group accounts for which membership is required to use the session.
    # RequiredGroups = @{ And = @{ Or = 'CONTOSO\SmartCard-Logon1', 'CONTOSO\SmartCard-Logon2' }, 'Administrators' }
    
    # Language mode to apply when applied to a session. Can be 'NoLanguage' (recommended), 'RestrictedLanguage', 'ConstrainedLanguage', or 'FullLanguage'
    LanguageMode = 'NoLanguage'
    
    # Execution policy to apply when applied to a session
    ExecutionPolicy = 'Restricted'
    
    # Version of the Windows PowerShell engine to use  when applied to a session
    # PowerShellVersion = '5.1.14393.0'
    
    # Modules to import when applied to a session
    # ModulesToImport = 'MyCustomModule', @{ ModuleName = 'MyCustomModule'; ModuleVersion = '1.0.0.0'; GUID = '4d30d5f0-cb16-4898-812d-f20a6c596bdf' }
    
    # Aliases to make visible when applied to a session
    # VisibleAliases = 'Item1', 'Item2'
    
    # Cmdlets to make visible when applied to a session
    # VisibleCmdlets = 'Invoke-Cmdlet1', @{ Name = 'Invoke-Cmdlet2'; Parameters = @{ Name = 'Parameter1'; ValidateSet = 'Item1', 'Item2' }, @{ Name = 'Parameter2'; ValidatePattern = 'L*' } }
    
    # Functions to make visible when applied to a session
    # VisibleFunctions = 'Invoke-Function1', @{ Name = 'Invoke-Function2'; Parameters = @{ Name = 'Parameter1'; ValidateSet = 'Item1', 'Item2' }, @{ Name = 'Parameter2'; ValidatePattern = 'L*' } }
    
    # External commands (scripts and applications) to make visible when applied to a session
    # VisibleExternalCommands = 'Item1', 'Item2'
    
    # Providers to make visible when applied to a session
    # VisibleProviders = 'Item1', 'Item2'
    # VisibleProviders = 'Variable'
    
    # Aliases to be defined when applied to a session
    # AliasDefinitions = @{ Name = 'Alias1'; Value = 'Invoke-Alias1'}, @{ Name = 'Alias2'; Value = 'Invoke-Alias2'}
    
    # Functions to define when applied to a session
    # FunctionDefinitions = @{ Name = 'MyFunction'; ScriptBlock = { param($MyInput) $MyInput } }
    
    # Variables to define when applied to a session
    # VariableDefinitions = @{ Name = 'Variable1'; Value = { 'Dynamic' + 'InitialValue' } }, @{ Name = 'Variable2'; Value = 'StaticInitialValue' }
    
    # Environment variables to define when applied to a session
    # EnvironmentVariables = @{ Variable1 = 'Value1'; Variable2 = 'Value2' }
    
    # Type files (.ps1xml) to load when applied to a session
    # TypesToProcess = 'C:\ConfigData\MyTypes.ps1xml', 'C:\ConfigData\OtherTypes.ps1xml'
    
    # Format files (.ps1xml) to load when applied to a session
    # FormatsToProcess = 'C:\ConfigData\MyFormats.ps1xml', 'C:\ConfigData\OtherFormats.ps1xml'
    
    # Assemblies to load when applied to a session
    # AssembliesToLoad = 'System.Web', 'System.OtherAssembly, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'
    
    }